/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
/*
 * Copyright (c) 2021 Google LLC
 *
 * All rights reserved.
 *
 * Author: Serhat Arslan <serhatarslan@google.com>
 */

#ifndef BOLT_HEADER_PTR_H
#define BOLT_HEADER_PTR_H

#include "ns3/header.h"

namespace ns3 {
/**
 * \ingroup bolt
 * \brief Simplified Packet header for Bolt Transport packets
 *
 * This class has fields corresponding to those in a network Bolt header
 * (transport protocol). Therefore it should be syched with the bolt-header
 * definition.
 */
class BoltHeaderPtr
{
 public:

  struct {
		uint16_t m_srcPort;         //!< Source port
    uint16_t m_dstPort;         //!< Destination port
    uint32_t m_seqAckNo;        //!< Sequence or Ack number in bytes
    uint16_t m_flags;           //!< Packet type
    uint16_t m_txMsgId;         //!< ID generated by the sender
    uint32_t m_drainTime;       //!< Time to drain the most congested queue
    uint32_t m_reflectedDelay;  //!< Timestamp to calculate RTT
    uint8_t m_reflectedHopCnt;  //!< Number of hops between the end-hosts
  };

  /**
   * \brief Constructor
   *
   * Creates a null header
   */
  BoltHeaderPtr();
  ~BoltHeaderPtr();

  uint32_t GetSerializedSize(void) const;

  /**
   * \param port The source port for this BoltHeader
   */
  void SetSrcPort(uint16_t port);
  /**
   * \return The source port for this BoltHeader
   */
  uint16_t GetSrcPort(void) const;

  /**
   * \param port The destination port for this BoltHeader
   */
  void SetDstPort(uint16_t port);
  /**
   * \return the destination port for this BoltHeader
   */
  uint16_t GetDstPort(void) const;

  /**
   * \param txMsgId The TX message ID for this BoltHeader
   */
  void SetTxMsgId(uint16_t txMsgId);
  /**
   * \return The source port for this BoltHeader
   */
  uint16_t GetTxMsgId(void) const;

  /**
   * \brief Set the sequence or acknowledgement number for the packet
   * \param seqAckNo The sequence number to set
   */
  void SetSeqAckNo(uint32_t seqAckNo);
  /**
   * \brief Get the sequence or acknowledgement number for the packet
   * \return The sequence number associated with the packet
   */
  uint32_t GetSeqAckNo() const;

  /**
   * \brief Set flags of the header
   * \param flags the flags for this BoltHeader
   */
  void SetFlags(uint16_t flags);
  /**
   * \brief Get the flags
   * \return the flags for this BoltHeader
   */
  uint16_t GetFlags() const;

  /**
   * \brief Set the reflected hop count value for the packet
   * \param reflectedHopCnt The number of hops in the path of this packet
   */
  void SetReflectedHopCnt(uint8_t reflectedHopCnt);
  /**
   * \brief Get the reflected hop count value of the packet
   * \return The number of hops in the path of this packet
   */
  uint8_t GetReflectedHopCnt() const;

  /**
   * \brief Set the reflected timestamp for the packet
   * \param reflectedDelay The timestamp for creation of the data packet
   */
  void SetReflectedDelay(uint32_t reflectedDelay);
  /**
   * \brief Get the reflected timestamp for the packet
   * \return The timestamp for creation of the corresponding data packet
   */
  uint32_t GetReflectedDelay() const;

  /**
   * \brief Set the time to drain the most congested queue on the path
   * \param drainTime The size of the queue in nanoseconds
   */
  void SetDrainTime(uint32_t qSize);
  /**
   * \brief Get the time to drain the most congested queue on the path
   * \return The size of the most congested queue in nanoseconds
   */
  uint32_t GetDrainTime() const;
};
}  // namespace ns3
#endif /* BOLT_HEADER_PTR */
